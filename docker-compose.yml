version: "3.8"
services:
    db_app:
        image: mysql:8.0
        command:
            --key_buffer_size=128M
            --max_allowed_packet=128M
            --thread_stack=512K
            --thread_cache_size=16
            --max_connections=256
            --tmp_table_size=128M
            --innodb_buffer_pool_size=512M
            --innodb_flush_log_at_trx_commit=2
            --skip-log-bin
            --skip-external-locking
        container_name: database
        environment:
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
            MYSQL_USER: root
        entrypoint: >
            sh -c "
              echo 'CREATE DATABASE IF NOT EXISTS application;' > /docker-entrypoint-initdb.d/init.sql;
              echo 'CREATE USER \"application\"@\"localhost\" IDENTIFIED BY \"application\";' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'GRANT ALL PRIVILEGES ON application.* TO \"application\"@\"localhost\";' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'GRANT ALL PRIVILEGES ON application.* TO \"application\"@\"127.0.0.1\";' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'CREATE DATABASE IF NOT EXISTS wordpress;' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'CREATE USER \"wordpress\"@\"localhost\" IDENTIFIED BY \"wordpress\";' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'GRANT ALL PRIVILEGES ON wordpress.* TO \"wordpress\"@\"localhost\";' >> /docker-entrypoint-initdb.d/init.sql;
              echo 'GRANT ALL PRIVILEGES ON wordpress.* TO \"wordpress\"@\"127.0.0.1\";' >> /docker-entrypoint-initdb.d/init.sql;
              /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
            "
        ports:
            - "6612:3306"
    webserver_app:
        build: .docker/httpd
        container_name: webserver-app
        volumes:
            - .:/var/www/application
    webserver_wordpress:
        build: .docker/httpd
        container_name: webserver-wordpress
        volumes:
            - ./sandbox:/var/www/application
    adminer:
        image: adminer
        container_name: adminer
    caddy_reverse_proxy:
        image: caddy
        container_name: caddy
        restart: unless-stopped
        volumes:
            - .docker/caddy/Caddyfile:/etc/caddy/Caddyfile
        ports:
            - "80:80"
            - "443:443"